From 6e17f8f7fadbcb3a0e8a5685989061cd6c7032fe Mon Sep 17 00:00:00 2001
From: "zhaoyang.tian" <zhaoyang.tian@deltaww.com>
Date: Wed, 10 Jan 2018 20:04:48 +0800
Subject: [PATCH] ismt dsc100

---
 drivers/i2c/busses/i2c-ismt.c | 11 ++++++++++-
 1 file changed, 10 insertions(+), 1 deletion(-)

diff --git a/drivers/i2c/busses/i2c-ismt.c b/drivers/i2c/busses/i2c-ismt.c
index 8477292..2ce7dec 100644
--- a/drivers/i2c/busses/i2c-ismt.c
+++ b/drivers/i2c/busses/i2c-ismt.c
@@ -66,6 +66,7 @@
 #include <linux/i2c.h>
 #include <linux/acpi.h>
 #include <linux/interrupt.h>
+#include <linux/delay.h>
 
 #include <linux/io-64-nonatomic-lo-hi.h>
 
@@ -193,6 +194,7 @@ static unsigned int bus_speed;
 module_param(bus_speed, uint, S_IRUGO);
 MODULE_PARM_DESC(bus_speed, "Bus Speed in kHz (0 = BIOS default)");
 
+spinlock_t ismt_lock;
 /**
  * __ismt_desc_dump() - dump the contents of a specific descriptor
  */
@@ -390,6 +392,8 @@ static int ismt_access(struct i2c_adapter *adap, u16 addr,
 	struct ismt_desc *desc;
 	struct ismt_priv *priv = i2c_get_adapdata(adap);
 	struct device *dev = &priv->pci_dev->dev;
+	unsigned long flagsLock;
+	spin_lock_irqsave(&ismt_lock, flagsLock);
 
 	desc = &priv->hw[priv->head];
 
@@ -547,6 +551,7 @@ static int ismt_access(struct i2c_adapter *adap, u16 addr,
 	default:
 		dev_err(dev, "Unsupported transaction %d\n",
 			size);
+		spin_unlock_irqrestore(&ismt_lock, flagsLock);
 		return -EOPNOTSUPP;
 	}
 
@@ -566,6 +571,7 @@ static int ismt_access(struct i2c_adapter *adap, u16 addr,
 		if (dma_mapping_error(dev, dma_addr)) {
 			dev_err(dev, "Error in mapping dma buffer %p\n",
 				priv->dma_buffer);
+			spin_unlock_irqrestore(&ismt_lock, flagsLock);
 			return -EIO;
 		}
 
@@ -580,6 +586,7 @@ static int ismt_access(struct i2c_adapter *adap, u16 addr,
 
 	/* Add the descriptor */
 	ismt_submit_desc(priv);
+	udelay(1);
 
 	/* Now we wait for interrupt completion, 1s */
 	time_left = wait_for_completion_timeout(&priv->cmp, HZ*1);
@@ -601,7 +608,8 @@ static int ismt_access(struct i2c_adapter *adap, u16 addr,
 	/* Update the ring pointer */
 	priv->head++;
 	priv->head %= ISMT_DESC_ENTRIES;
-
+    mdelay(6);
+	spin_unlock_irqrestore(&ismt_lock, flagsLock);
 	return ret;
 }
 
@@ -778,6 +786,7 @@ static int ismt_dev_init(struct ismt_priv *priv)
 
 	priv->head = 0;
 	init_completion(&priv->cmp);
+	spin_lock_init(&ismt_lock);
 
 	return 0;
 }
-- 
2.7.4

